#!/usr/bin/env python3
"""
Script to update jobs table schema with detailed job information fields
"""

import sqlite3
import json

def update_job_schema():
    """C·∫≠p nh·∫≠t schema b·∫£ng jobs v·ªõi c√°c tr∆∞·ªùng chi ti·∫øt"""
    try:
        conn = sqlite3.connect('admin_content.db')
        cur = conn.cursor()
        
        # Th√™m c√°c c·ªôt m·ªõi cho chi ti·∫øt vi·ªác l√†m
        new_columns = [
            ('job_code', 'TEXT'),  # M√£ ƒë∆°n h√†ng
            ('location', 'TEXT'),  # T·ªânh, khu v·ª±c
            ('company', 'TEXT'),   # C√¥ng ty, nghi·ªáp ƒëo√†n
            ('quantity', 'INTEGER DEFAULT 1'),  # S·ªë l∆∞·ª£ng tuy·ªÉn
            ('gender_requirement', 'TEXT'),  # Y√™u c·∫ßu gi·ªõi t√≠nh
            ('age_min', 'INTEGER'),  # Tu·ªïi t·ªëi thi·ªÉu
            ('age_max', 'INTEGER'),  # Tu·ªïi t·ªëi ƒëa
            ('work_hours', 'TEXT'),  # Th·ªùi gian l√†m vi·ªác
            ('overtime_pay', 'TEXT'),  # L∆∞∆°ng l√†m th√™m
            ('accommodation', 'TEXT'),  # Ch·ªó ·ªü
            ('meals', 'TEXT'),  # ƒÇn u·ªëng
            ('insurance', 'TEXT'),  # B·∫£o hi·ªÉm
            ('contract_duration', 'TEXT'),  # Th·ªùi h·∫°n h·ª£p ƒë·ªìng
            ('job_description', 'TEXT'),  # M√¥ t·∫£ c√¥ng vi·ªác chi ti·∫øt
            ('job_requirements', 'TEXT'),  # Y√™u c·∫ßu c√¥ng vi·ªác chi ti·∫øt
            ('benefits', 'TEXT'),  # Quy·ªÅn l·ª£i
            ('working_conditions', 'TEXT'),  # ƒêi·ªÅu ki·ªán l√†m vi·ªác
            ('application_process', 'TEXT'),  # Quy tr√¨nh ·ª©ng tuy·ªÉn
            ('documents_required', 'TEXT'),  # H·ªì s∆° y√™u c·∫ßu
            ('training_provided', 'TEXT'),  # ƒê√†o t·∫°o cung c·∫•p
            ('language_requirement', 'TEXT'),  # Y√™u c·∫ßu ngo·∫°i ng·ªØ
            ('additional_notes', 'TEXT'),  # Ghi ch√∫ th√™m
        ]
        
        # Ki·ªÉm tra v√† th√™m t·ª´ng c·ªôt n·∫øu ch∆∞a t·ªìn t·∫°i
        for column_name, column_type in new_columns:
            try:
                cur.execute(f"ALTER TABLE jobs ADD COLUMN {column_name} {column_type}")
                print(f"‚úÖ ƒê√£ th√™m c·ªôt: {column_name}")
            except sqlite3.OperationalError as e:
                if "duplicate column name" in str(e):
                    print(f"‚ö†Ô∏è  C·ªôt {column_name} ƒë√£ t·ªìn t·∫°i")
                else:
                    print(f"‚ùå L·ªói khi th√™m c·ªôt {column_name}: {e}")
        
        # Th√™m d·ªØ li·ªáu m·∫´u cho m·ªôt s·ªë job hi·ªán c√≥
        sample_jobs = [
            {
                'id': 1,
                'job_code': 'RU001',
                'location': 'To√†n qu·ªëc',
                'company': 'V√πng Ryazan, g Sasovo, ul.Pushkin, 21',
                'quantity': 10,
                'gender_requirement': 'Nam',
                'age_min': 20,
                'age_max': 45,
                'work_hours': '8 gi·ªù/ng√†y, 5 ng√†y/tu·∫ßn',
                'overtime_pay': '150% l∆∞∆°ng c∆° b·∫£n',
                'accommodation': 'C√¥ng ty cung c·∫•p ch·ªó ·ªü mi·ªÖn ph√≠',
                'meals': 'H·ªó tr·ª£ 50% chi ph√≠ ƒÉn u·ªëng',
                'insurance': 'B·∫£o hi·ªÉm y t·∫ø v√† tai n·∫°n lao ƒë·ªông',
                'contract_duration': '2 nƒÉm',
                'job_description': 'V·∫≠n h√†nh m√°y ƒë√∫c kim lo·∫°i, ki·ªÉm tra ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m, b·∫£o tr√¨ thi·∫øt b·ªã c∆° b·∫£n',
                'job_requirements': 'C√≥ kinh nghi·ªám l√†m vi·ªác v·ªõi m√°y m√≥c, kh·ªèe m·∫°nh, c√≥ tr√°ch nhi·ªám',
                'benefits': 'L∆∞∆°ng cao, m√¥i tr∆∞·ªùng l√†m vi·ªác an to√†n, c∆° h·ªôi h·ªçc h·ªèi c√¥ng ngh·ªá m·ªõi',
                'working_conditions': 'L√†m vi·ªác trong nh√† m√°y hi·ªán ƒë·∫°i, c√≥ ƒëi·ªÅu h√≤a kh√¥ng kh√≠',
                'application_process': 'N·ªôp h·ªì s∆° ‚Üí Ph·ªèng v·∫•n ‚Üí Kh√°m s·ª©c kh·ªèe ‚Üí K√Ω h·ª£p ƒë·ªìng',
                'documents_required': 'H·ªô chi·∫øu, b·∫±ng c·∫•p, gi·∫•y kh√°m s·ª©c kh·ªèe, s∆° y·∫øu l√Ω l·ªãch',
                'training_provided': 'ƒê√†o t·∫°o k·ªπ thu·∫≠t 2 tu·∫ßn tr∆∞·ªõc khi l√†m vi·ªác',
                'language_requirement': 'Ti·∫øng Nga c∆° b·∫£n (s·∫Ω ƒë∆∞·ª£c ƒë√†o t·∫°o)',
                'additional_notes': '∆Øu ti√™n ·ª©ng vi√™n c√≥ kinh nghi·ªám c∆° kh√≠'
            }
        ]
        
        # C·∫≠p nh·∫≠t d·ªØ li·ªáu m·∫´u
        for job_data in sample_jobs:
            job_id = job_data.pop('id')
            
            # T·∫°o c√¢u l·ªánh UPDATE
            set_clauses = []
            values = []
            for key, value in job_data.items():
                set_clauses.append(f"{key} = ?")
                values.append(value)
            
            if set_clauses:
                values.append(job_id)
                update_query = f"UPDATE jobs SET {', '.join(set_clauses)} WHERE id = ?"
                cur.execute(update_query, values)
                print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t d·ªØ li·ªáu m·∫´u cho job ID: {job_id}")
        
        conn.commit()
        print("‚úÖ C·∫≠p nh·∫≠t schema b·∫£ng jobs th√†nh c√¥ng!")
        
        # Hi·ªÉn th·ªã schema m·ªõi
        cur.execute("PRAGMA table_info(jobs)")
        columns = cur.fetchall()
        print("\nüìã Schema b·∫£ng jobs sau khi c·∫≠p nh·∫≠t:")
        for col in columns:
            print(f"  - {col[1]} ({col[2]})")
        
    except Exception as e:
        print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t schema: {e}")
        return False
    finally:
        if conn:
            conn.close()
    
    return True

if __name__ == "__main__":
    update_job_schema()